
==================== FINAL INTERFACE ====================
2019-02-22 17:02:24.198441475 UTC

interface main:Main 8063
  interface hash: 54c82ce655dd02c29bfded095ee4f399
  ABI hash: 71c7789c3c0596ce5952f3b47e22374e
  export-list hash: f90a65b8c88070c706034bd1344b251d
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8e1d11ce8797c0156ca85dc8e4af6680
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: base-4.12.0.0* ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:Prelude 5c01365ec01f83bd405ac01cbb9a8d76
import  -/  base-4.12.0.0:System.Environment 2204870ad586be67c274aa49ce9ae53a
import  -/  base-4.12.0.0:System.Exit 9bdfd82d04c0a0b8d920842d9c4e961d
import  -/  base-4.12.0.0:System.IO 88c2b1c4079c52d62ed362d4eb9a5302
import  -/  ghc-prim-0.5.3:GHC.Classes e0d9c979f6368701f34fa421754d2cce
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
231718dae8251bab1fe5748c9713876a
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
bd3c08bfd373f24d711aeb4e5f6d5d4d
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Classes.$fEq[]_$s$c==1
                        ipv1
                        (GHC.Types.[] @ GHC.Base.String) of wild {
                   GHC.Types.False
                   -> (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.main14
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv
                   GHC.Types.True
                   -> case (GHC.IO.Handle.Text.hPutStr'
                              GHC.IO.Handle.FD.stdout
                              Main.main12
                              GHC.Types.True)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case (GHC.IO.Handle.Text.hPutStr'
                              GHC.IO.Handle.FD.stdout
                              (GHC.Types.[] @ GHC.Types.Char)
                              GHC.Types.True)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                      case (GHC.IO.Handle.Text.hPutStr'
                              GHC.IO.Handle.FD.stdout
                              Main.main10
                              GHC.Types.True)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                      case (GHC.IO.Handle.Text.hPutStr'
                              GHC.IO.Handle.FD.stdout
                              Main.main8
                              GHC.Types.True)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                      case (GHC.IO.Handle.Text.hPutStr'
                              GHC.IO.Handle.FD.stdout
                              Main.main6
                              GHC.Types.True)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             ipv8 of ds6 { (#,#) ipv10 ipv11 ->
                      case (GHC.IO.Handle.Text.hPutStr'
                              GHC.IO.Handle.FD.stdout
                              Main.main4
                              GHC.Types.True)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             ipv10 of ds7 { (#,#) ipv12 ipv13 ->
                      (GHC.IO.Handle.Text.hPutStr'
                         GHC.IO.Handle.FD.stdout
                         Main.main2
                         GHC.Types.True)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv12 } } } } } } } }) -}
f5444b162e103168df2c9cc9e714d8df
  main10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main11) -}
570ed1c924dad489e923c40fef8fd0a0
  main11 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\t--check\t\tcheck if a sequence is a de Bruijn sequence"#) -}
e0490663d11a339eb1c8aecaf7709111
  main12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main13) -}
316618a5e0b7242ebac30362235dd9af
  main13 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("USAGE: ./deBruijn n [a] [--check|--unique|--clean]"#) -}
6f289f960b96ab7eb97ac689d9238c6b
  main14 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main15) -}
7f55d5d41a5aafa47813ee551b6e9827
  main15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OK"#) -}
7062db92d31b69a117784930237bb4e5
  main16 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
32699ab4cfab0db80a1e345beefeecde
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCStringUtf8# Main.main3) -}
04e5ecfc789fe22332ed9a4cd0a14a35
  main3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\ta\t\talphabet [def: \\226\\128\\15601\\226\\128\\157]"#) -}
9b3a42f119c0340fc9344c1859b909e2
  main4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main5) -}
6e63e447325d8674c57e362b349dd8bc
  main5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\tn\t\torder of the sequence"#) -}
67deb0c59b0e75bda7477544c3ae8204
  main6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main7) -}
6f64729dc444cb3496750cb3117ff4d6
  main7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\t--clean\t\tlist cleaning"#) -}
db5822837006d79f4ca66be18b5f60df
  main8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main9) -}
e0ac4b4be571a8ab5b54fee98a0ad3bf
  main9 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\t--unique\tcheck if 2 sequences are distinct de Bruijn sequences"#) -}
trusted: safe
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

